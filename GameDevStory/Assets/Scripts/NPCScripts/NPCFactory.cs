using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// Because NPCs need to be hired, they are not initially instantiated in
/// the game world. To hire an NPC the NPC's attributes and statistics need
/// to be known. The NPCFactory manages the instantiation of NPCInfo objects
/// which are later used to create NPCS.
/// The NPCFactory has the responsiblity of generating randomised statistics
/// for each NPC, as well as ensuring no NPC is duplicated in-game.
/// The NPCInfo object can later be used to instantiate the NPC.
public class NPCFactory : Singleton<NPCFactory> {

    // The data structure for storing NPC stats.
    // These are randomly generated by the npc factory
    public class NPCStats
    {
        public int communication;
        public int testing;
        public int technical;
        public int creativity;
        public int design;
    }

    // A pool of pre-made NPCs that are available for instantiation
    public List<NPCAttributes> npcs;

    // selects a pre-made npc at random from the pool of potential npcs
    public NPCAttributes SelectRandomNPC()
    {
        return npcs[Random.Range(0,npcs.Count)];
    }

    // generates a stats object with all fields randomly initialized
    public NPCStats GetRandomStats()
    {
        NPCStats stats = new NPCStats
        {
            communication = Random.Range(1, 101),
            creativity = Random.Range(1, 101),
            testing = Random.Range(1, 101),
            technical = Random.Range(1, 101),
            design = Random.Range(1, 101)
        };

        return stats;
    }

    // Creates an NPCInfo object with randomised statistics.
    public NPCInfo CreateNPCWithRandomizedStats()
    {
        NPCAttributes randomNPC = SelectRandomNPC();
        NPCInfo npc = new NPCInfo()
        {
            Attributes = randomNPC,
            Stats = GetRandomStats()
        };

        // ensure that no npc can be generated twice (npcs are unique).
        // TODO?: improve this to remove only those that hired.
        npcs.Remove(randomNPC);

        return npc;
    }
}
