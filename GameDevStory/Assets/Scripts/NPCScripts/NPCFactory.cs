using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// Because NPCs need to be hired, they are not initially instantiated in
/// the game world. To hire an NPC the NPC's attributes and statistics need
/// to be known. The NPCFactory manages the instantiation of NPCInfo objects
/// which are later used to create NPCS.
/// The NPCFactory has the responsiblity of generating randomised statistics
/// for each NPC, as well as ensuring no NPC is duplicated in-game.
/// The NPCInfo object can later be used to instantiate the NPC.
public class NPCFactory : Singleton<NPCFactory> {

    // The data structure for storing NPC stats.
    // These are randomly generated by the npc factory
    public class NPCStats
    {
        public int Communication;
        public int Testing;
        public int Technical;
        public int Creativity;
        public int Design;
    }

    // A pool of pre-made NPCs that are available for instantiation
    public List<NPCAttributes> Npcs;

    // determines how significant the gender pay gap is. 
    // Could change as the game progresses, eventually achieving equal pay
    public float FemalePayMultiplier = 0.75f;

    // fields defining the range of values for the NPC costs
    public int MinEmployeeCost = 50;
    public int MaxEmployeeCost = 100;
   
    // selects a pre-made npc at random from the pool of potential npcs
    public NPCAttributes SelectRandomNPC()
    {
        return Npcs[Random.Range(0,Npcs.Count)];
    }

    // generates a stats object with all fields randomly initialized
    public NPCStats GetRandomStats()
    {
        NPCStats stats = new NPCStats
        {
            Communication = Random.Range(1, 101),
            Creativity = Random.Range(1, 101),
            Testing = Random.Range(1, 101),
            Technical = Random.Range(1, 101),
            Design = Random.Range(1, 101)
        };

        return stats;
    }

    // Creates an NPCInfo object with randomised statistics.
    public NPCInfo CreateNPCWithRandomizedStats()
    {
        NPCStats randomStats = GetRandomStats();
        NPCAttributes randomNPC = SelectRandomNPC();

        NPCInfo npc = new NPCInfo()
        {
            Attributes = randomNPC,
            Stats = GetRandomStats()
        };

        npc.Attributes.cost = CalculateEmployeeCost(npc);

        // ensure that no npc can be generated twice (npcs are unique).
        // TODO?: improve this to remove only those that hired.
        Npcs.Remove(randomNPC);

        return npc;
    }

    // helper method to calculate the cost of employees based on their stats 
    //TODO: and the player's current balance
    private int CalculateEmployeeCost(NPCInfo npc)
    {
        // work with float until the end where we will round
        float cost = 0;

        // each of the stats is worth an equal amount, and when added together must be within the
        // range of potential employee costs
        float minStatCost = MinEmployeeCost / 5;
        float maxStatCost = MaxEmployeeCost / 5;

        NPCStats stats = npc.Stats;

        cost += PercentBetween(minStatCost, maxStatCost, stats.Communication);
        cost += PercentBetween(minStatCost, maxStatCost, stats.Testing);
        cost += PercentBetween(minStatCost, maxStatCost, stats.Technical);
        cost += PercentBetween(minStatCost, maxStatCost, stats.Creativity);
        cost += PercentBetween(minStatCost, maxStatCost, stats.Design);

        if (npc.Attributes.gender.Equals(NPCAttributes.Gender.FEMALE))
            cost *= FemalePayMultiplier;

        return Mathf.RoundToInt(cost);
    }

    // helper to give the value that is percent between min and max.
    // e.g PercentBetween(0,10,50) = 5 as 5 is halfway between 0 and 10
    private float PercentBetween(float min, float max, int percent)
    {
        float offset = (max - min) * percent / 100;
        return min + offset;
    }
}
